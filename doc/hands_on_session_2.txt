
############# INTRODUCTION

Currently several hardware versions exist 
  Version MCU1021: Two axes system
  Version MCU1026: Two axes system
  Version MCU101*: One axis system

Check state of EtherCAT master
sudo /etc/init.d/ethercat status

Examples of configurations can be found in folder: ecmctraining/V2/startup/

############# HANDS ON EXCERCISES

1. Test the test-scripts in "test" directory

2. Link an EPICS record to an EtherCAT entry using stream device:
   1. Identfy an free digital output on the EL2808 card
   2. Use the db/ethercatExample.db and protocol/ethercatExample.proto files (See end of st.startTrainingXAxisStreamDevice.cmd).
   3. Link the records to the digitral output
   4. Use dbgf <record name> to read value
   5. Use dbpf <record name> to write value

3. Link an external signal to interlock to the motion axis:
   1. Link EtherCAT entry to monitoring object interlock (normally this should be a digital input. Just for testing we can take an 
      output instead that is controlled from epics (we have no pushbuttons on some units)). Link the output you configured in the last 
      exercise to interlock the motion: ecmcConfigController "MCU1", "Cfg.LinkEcEntryToAxisMonitor(0,OUTPUT_X,1,3,0)"
   3. Enable the functionality with: ecmcConfigController "MCU1", "Cfg.SetAxisMonEnableExtHWInterlock(1,1)" 
   4. Start your configuration.
   5. Write a one to the output with dbpf command (one is OK, zero is not OK).
   6. Start a motion in slow velocity.
   7. Write a zero to the output with dbpf command. Motion should stop.

4. Syncronization: Syncronize axis 1 to axis 2 with an gear ratio of 0.5. See st.startTraining2AxisSyncStreamDevice.cmd (all syncronization commands are listed under #Synchronization).
   1. Create a Normal axis (axis 1)
   2. Create a Trajectory axis (axis 2)
   3. Set Trajectory source of axis one and 2 to internal
   4. Allow axis 1 to take enable and execute commands from axis 2
   5. Set command transform expression for axis 2 (ex1:=ex2#.....)
   6. Enable command transform for axis 2
   7. Set syncronization expression
   8. Start the ioc with your configuration file: iocsh st.startTraining2AxisSyncStreamDevice.cmd
   9. Open css and the overViewSlit.opi.
   10. Home/reference axis 1 by chosing homing in the drop down menu and enter 3 in the cmddata field, value box beside drop down menu (homing sequence 3). Enable and execute.
   11. When referencing is done then disable axis 1.
   12. Choose aboslute positioning for axis 1 and set value 0 in the cmddata field (beside drop down menu)
   13. Choose trajectory source to external for axis 1.
   14. Enable axis 2 (verify that also axis 1 is enabled)
   15. Run a positioning for axis 2 to a target position, for instance 10.
   16. Check the movement of axis 1 (should be 5).

5. Explore the ethercat commands for diagnostics:
   1. Read the documentation for "Cfg.EcSetDiagnostics(x)" and "Cfg.EcSetDomainFailedCyclesLimit(y)"
   2. What will happen if you turn on ethercat diagnostics? 
   3. Check the time jitter: ecmcConfigController "MCU1", "Cfg.SetEnableTimeDiag(1)"

6. Test events. Execute/trigger a homing sequence on a falling edge of an ethercat I/O (see st.startTraining2AxEventsStreamDevice.cmd)















